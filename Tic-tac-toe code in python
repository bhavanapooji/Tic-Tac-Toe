# 1)two players should be able to play the game (both sitting at the same computer)
# 2)the board should be printed out every time a player makes a move
# 3)you should be able to accept input of the player position and then place a symbol on the board

#4) We will use the "number pad" to match nu,bers to the grid on tic_tac_toe board:

            #     7   8   9
            #     4   5   6
            #     1   2   3

# Step1: Write a function that can print out a board. 
        # Set up your board as a list, where each index 1-9 corresponds with a number on a number pad, 
        # so you get a 3 by 3 board representation.

from IPython.display import clear_output

def display_board(board):
    clear_output()
    print('   |    |')
    print(' ' + board[7] +' | ' + board[8] + '  | ' + board[9])
    print('   |    |')
    print('-'*12)
    print('   |    |')
    print(' ' + board[4] +' | ' + board[5] + '  | ' + board[6])
    print('   |    |')
    print('-'*12)
    print('   |    |')
    print(' ' + board[1] +' | ' + board[2] + '  | ' + board[3])
    print('   |    |')
# test_board=['#','X','O','X','O','X','O','X','O','X']
# display_board(test_board)

# Step 2: Write a function that can take in a player input and assign their marker as 'X' or 'O'. 
# Think about using while loops to continually ask until you get a correct answer.


def player_input():
    '''Output=(Player1 marker, Player2 marker)'''
    marker=''

    while not (marker=='X' or marker=='O'):
        marker=input('Player1: Choose X or O: ').upper()
    
    if marker=='X':
        return('X','O')
    else:
        return('O','X')
# player_input()
# player1_marker, player2_marker=player_input()


# Step 3: Write a function that takes in the board list object, a marker ('X' or 'O'),
#  and a desired position (number 1-9) and assigns it to the board.
def place_marker(board,marker,position):
    board[position]=marker

# test_board=['#','X','O','X','O','X','O','X','O','X']
# place_marker(test_board,'$',8)
# display_board(test_board)


#Step 4: Write a function that takes in a board and checks to see if someone has won.
def win_check(board,mark):

    # win tic tac toe?


    return ((board[7] == mark and board[8] == mark and board[9] == mark) or # across the top
    (board[4] == mark and board[5] == mark and board[6] == mark) or # across the middle
    (board[1] == mark and board[2] == mark and board[3] == mark) or # across the bottom
    (board[7] == mark and board[4] == mark and board[1] == mark) or # down the middle
    (board[8] == mark and board[5] == mark and board[2] == mark) or # down the middle
    (board[9] == mark and board[6] == mark and board[3] == mark) or # down the right side
    (board[7] == mark and board[5] == mark and board[3] == mark) or # diagonal
    (board[9] == mark and board[5] == mark and board[1] == mark)) # diagonal
# display_board(test_board)
# print(win_check(test_board,'X'))


# Step 5: Write a function that uses the random module to randomly decide which player goes first.
#  You may want to lookup random.randint() Return a string of which player went first.

import random

def choose_first():
    flip=random.randint(0, 1)
    if flip == 0:
        return 'Player 2'
    else:
        return 'Player 1'

# Step 6: Write a function that returns a boolean indicating whether a space on the board is freely available.

def space_check(board, position):
    
    return board[position] == ' '

# Step 7: Write a function that checks if the board is full and returns a boolean value. 
# True if full, False otherwise.

def full_board_check(board):
    for i in range(1,10):
        if space_check(board,i):
            return False
    
    # board is full if we return true
    return True

# Step 8: Write a function that asks for a player's next position (as a number 1-9) and then uses the function from step 6 to check if its a free position. 
# If it is, then return the position for later use.

def player_choice(board):

    position=0

    while position not in [1,2,3,4,5,6,7,8,9] or not space_check(board,position):
        position=int(input('Choose a position: (1-9) '))

    return position

# Step 9: Write a function that asks the player if they want to play
#  again and returns a boolean True if they do want to play again.

def replay():
    # choice=input("Play again? Enter yes or No")
    # return choice=='Yes'

    # or
    return input('Do you want to play again? Enter Yes or No: ').lower().startswith('y')


# Step 10: Here comes the hard part! Use while loops and the functions you've made to run the game!

# while loop to keep running game
print('Welcome to Tic-Tac-Toe')
while True:
    # play the game

    # set everything up(board, who's first, choose markers X, O)
    the_board=[' ']*10
    player1_marker, player2_marker=player_input()

    turn=choose_first()
    print(turn + ' will go first')

    play_game=input('Are you ready to play? Enter Yes or No. ')

    if play_game.lower()[0]=='y':
        game_on=True 
    else:
        game_on=False

    # game play
    while game_on:
        if turn=='Player 1':
            display_board(the_board)
            # choose a position
            position=player_choice(the_board)
            # place the marker on the position
            place_marker(the_board,player1_marker,position)
            # check if they won
            if win_check(the_board,player1_marker):
                display_board(the_board)
                print('Congratulations! PLAYER 1 HAS WON!!')
                game_on=False
            else:
                if full_board_check(the_board):
                    display_board(the_board)
                    print("TIE GAME!")
                    game_on=False
                else:
                    turn='Player 2'

        else:
            display_board(the_board)
            # choose a position
            position=player_choice(the_board)
            # place the marker on the position
            place_marker(the_board,player2_marker,position)
            # check if they won
            if win_check(the_board,player2_marker):
                display_board(the_board)
                print('Congratulations! PLAYER 2 HAS WON!!')
                game_on=False
            else:
                if full_board_check(the_board):
                    display_board(the_board)
                    print("TIE GAME!")
                    game_on=False
                else:
                    turn='Player 1'

    if not replay():
        break
# break out of the while loop on replay()
